{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python Flask Application \u00b6 Aplicaci\u00f3n web sencilla desarrollada en Python Flask para demostraci\u00f3n de despliegues con Kubernetes y GitOps. \ud83c\udfaf Descripci\u00f3n \u00b6 Esta aplicaci\u00f3n Flask proporciona una API REST b\u00e1sica con endpoints para informaci\u00f3n del sistema y health checks, ideal para demostraciones de: Despliegues en Kubernetes Pipelines CI/CD Monitoreo y observabilidad Patrones de microservicios \ud83d\udccb Caracter\u00edsticas \u00b6 Framework : Flask (Python) Endpoints REST : JSON API Health Checks : Endpoint de salud para Kubernetes Containerizada : Docker ready Cloud Native : 12-factor app compliant \ud83d\ude80 API Endpoints \u00b6 GET /api/v1/info \u00b6 Devuelve informaci\u00f3n del sistema y la aplicaci\u00f3n. Response: 1 2 3 4 5 6 { \"time\" : \"02:30:45PM on August 25, 2025\" , \"hostname\" : \"python-app-1-pod-xyz\" , \"message\" : \"You are doing great, little human! <3\" , \"deployed_on\" : \"kubernetes\" } Ejemplo: 1 curl -X GET http://python-app-1.test.com/api/v1/info GET /api/v1/healthz \u00b6 Health check endpoint para Kubernetes probes. Response: 1 2 3 { \"status\" : \"up\" } HTTP Status Codes: - 200 OK : Aplicaci\u00f3n saludable - 503 Service Unavailable : Aplicaci\u00f3n no disponible Ejemplo: 1 curl -X GET http://python-app-1.test.com/api/v1/healthz \ud83d\udc33 Containerizaci\u00f3n \u00b6 Dockerfile \u00b6 La aplicaci\u00f3n est\u00e1 containerizada usando una imagen base de Python: 1 2 3 4 5 6 7 8 9 10 11 12 FROM python:3.9-slim WORKDIR /app COPY requirements.txt . RUN pip install -r requirements.txt COPY src/ . EXPOSE 5000 CMD [ \"python\" , \"app.py\" ] Build y Run Local \u00b6 1 2 3 4 5 6 7 8 # Build de la imagen docker build -t python-app-1 . # Ejecutar localmente docker run -p 5000 :5000 python-app-1 # Verificar que funciona curl http://localhost:5000/api/v1/healthz \u2638\ufe0f Despliegue en Kubernetes \u00b6 Manifiestos Base \u00b6 La aplicaci\u00f3n se despliega usando los siguientes recursos de Kubernetes: Deployment : Gestiona los pods de la aplicaci\u00f3n Service : Expone la aplicaci\u00f3n dentro del cluster Ingress : (Opcional) Routing externo Despliegue R\u00e1pido \u00b6 1 2 3 4 5 6 7 8 9 10 11 # Aplicar manifiestos kubectl apply -f k8s/ # Verificar estado kubectl get pods,svc -n default # Port forward para testing kubectl port-forward svc/python-app-1 5000 :80 # Test de conectividad curl http://localhost:5000/api/v1/healthz Health Checks en Kubernetes \u00b6 La aplicaci\u00f3n est\u00e1 configurada con probes de Kubernetes: 1 2 3 4 5 6 7 8 9 10 11 12 13 livenessProbe : httpGet : path : /api/v1/healthz port : 5000 initialDelaySeconds : 30 periodSeconds : 10 readinessProbe : httpGet : path : /api/v1/healthz port : 5000 initialDelaySeconds : 5 periodSeconds : 5 \ud83d\udd27 Desarrollo Local \u00b6 Requisitos \u00b6 Python 3.9+ pip Flask Setup del Entorno \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # Clonar repositorio git clone https://github.com/Portfolio-jaime/python-app-1.git cd python-app-1 # Crear virtual environment python -m venv venv source venv/bin/activate # Linux/Mac # venv\\Scripts\\activate # Windows # Instalar dependencias pip install -r requirements.txt # Ejecutar aplicaci\u00f3n cd src python app.py La aplicaci\u00f3n estar\u00e1 disponible en http://localhost:5000 Testing \u00b6 1 2 3 4 5 6 7 8 # Test del endpoint info curl http://localhost:5000/api/v1/info # Test del health check curl http://localhost:5000/api/v1/healthz # Verificar JSON response curl -H \"Accept: application/json\" http://localhost:5000/api/v1/info | jq \ud83d\udcca Monitoreo \u00b6 M\u00e9tricas Disponibles \u00b6 La aplicaci\u00f3n expone informaci\u00f3n \u00fatil para monitoreo: Hostname : Identificaci\u00f3n del pod/contenedor Timestamp : Para verificar que la aplicaci\u00f3n responde Health Status : Estado de la aplicaci\u00f3n Integraci\u00f3n con Prometheus \u00b6 Para monitoreo avanzado, la aplicaci\u00f3n puede extenderse con m\u00e9tricas de Prometheus: 1 2 3 4 5 6 7 8 from prometheus_client import Counter , Histogram , generate_latest REQUEST_COUNT = Counter ( 'requests_total' , 'Total requests' , [ 'method' , 'endpoint' ]) REQUEST_LATENCY = Histogram ( 'request_duration_seconds' , 'Request latency' ) @app . route ( '/metrics' ) def metrics (): return generate_latest () \ud83d\udd10 Seguridad \u00b6 Mejores Pr\u00e1cticas Implementadas \u00b6 Non-root User : Container ejecuta como usuario no-root Minimal Base Image : Usa imagen slim para reducir superficie de ataque Health Checks : Endpoints para verificar estado de la aplicaci\u00f3n Environment Variables : Configuraci\u00f3n via variables de entorno Variables de Entorno \u00b6 1 2 3 4 5 6 7 8 # Puerto de la aplicaci\u00f3n (default: 5000) FLASK_PORT = 5000 # Modo debug (solo development) FLASK_DEBUG = false # Environment FLASK_ENV = production \ud83d\ude80 CI/CD Pipeline \u00b6 La aplicaci\u00f3n est\u00e1 integrada con GitHub Actions para: Testing : Ejecuci\u00f3n de tests unitarios Security Scanning : An\u00e1lisis de vulnerabilidades Docker Build : Construcci\u00f3n autom\u00e1tica de im\u00e1genes Deployment : Actualizaci\u00f3n autom\u00e1tica de manifiestos Workflow Ejemplo \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 name : CI/CD Pipeline on : push : branches : [ main ] jobs : test : runs-on : ubuntu-latest steps : - uses : actions/checkout@v4 - name : Run tests run : python -m pytest tests/ build : needs : test runs-on : ubuntu-latest steps : - name : Build Docker image run : docker build -t python-app-1 . \ud83d\udcc8 Escalabilidad \u00b6 Horizontal Pod Autoscaler \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 apiVersion : autoscaling/v2 kind : HorizontalPodAutoscaler metadata : name : python-app-1-hpa spec : scaleTargetRef : apiVersion : apps/v1 kind : Deployment name : python-app-1 minReplicas : 2 maxReplicas : 10 metrics : - type : Resource resource : name : cpu target : type : Utilization averageUtilization : 70 \ud83d\udc1b Troubleshooting \u00b6 Problemas Comunes \u00b6 Aplicaci\u00f3n no responde \u00b6 1 2 3 4 5 6 7 8 # Verificar logs kubectl logs -l app = python-app-1 # Verificar estado de pods kubectl get pods -l app = python-app-1 # Port forward para debug kubectl port-forward deployment/python-app-1 5000 :5000 Health check falla \u00b6 1 2 3 4 5 # Test directo al pod kubectl exec -it deployment/python-app-1 -- curl localhost:5000/api/v1/healthz # Verificar configuraci\u00f3n de probes kubectl describe deployment python-app-1 \ud83d\udcde Soporte \u00b6 Autor: Jaime Henao Email: jaime.andres.henao.arbelaez@ba.com Organizaci\u00f3n: British Airways DevOps Team GitHub: @Portfolio-jaime Aplicaci\u00f3n Python Flask - DevOps Portfolio","title":"Python Flask Application"},{"location":"#python-flask-application","text":"Aplicaci\u00f3n web sencilla desarrollada en Python Flask para demostraci\u00f3n de despliegues con Kubernetes y GitOps.","title":"Python Flask Application"},{"location":"#descripcion","text":"Esta aplicaci\u00f3n Flask proporciona una API REST b\u00e1sica con endpoints para informaci\u00f3n del sistema y health checks, ideal para demostraciones de: Despliegues en Kubernetes Pipelines CI/CD Monitoreo y observabilidad Patrones de microservicios","title":"\ud83c\udfaf Descripci\u00f3n"},{"location":"#caracteristicas","text":"Framework : Flask (Python) Endpoints REST : JSON API Health Checks : Endpoint de salud para Kubernetes Containerizada : Docker ready Cloud Native : 12-factor app compliant","title":"\ud83d\udccb Caracter\u00edsticas"},{"location":"#api-endpoints","text":"","title":"\ud83d\ude80 API Endpoints"},{"location":"#get-apiv1info","text":"Devuelve informaci\u00f3n del sistema y la aplicaci\u00f3n. Response: 1 2 3 4 5 6 { \"time\" : \"02:30:45PM on August 25, 2025\" , \"hostname\" : \"python-app-1-pod-xyz\" , \"message\" : \"You are doing great, little human! <3\" , \"deployed_on\" : \"kubernetes\" } Ejemplo: 1 curl -X GET http://python-app-1.test.com/api/v1/info","title":"GET /api/v1/info"},{"location":"#get-apiv1healthz","text":"Health check endpoint para Kubernetes probes. Response: 1 2 3 { \"status\" : \"up\" } HTTP Status Codes: - 200 OK : Aplicaci\u00f3n saludable - 503 Service Unavailable : Aplicaci\u00f3n no disponible Ejemplo: 1 curl -X GET http://python-app-1.test.com/api/v1/healthz","title":"GET /api/v1/healthz"},{"location":"#containerizacion","text":"","title":"\ud83d\udc33 Containerizaci\u00f3n"},{"location":"#dockerfile","text":"La aplicaci\u00f3n est\u00e1 containerizada usando una imagen base de Python: 1 2 3 4 5 6 7 8 9 10 11 12 FROM python:3.9-slim WORKDIR /app COPY requirements.txt . RUN pip install -r requirements.txt COPY src/ . EXPOSE 5000 CMD [ \"python\" , \"app.py\" ]","title":"Dockerfile"},{"location":"#build-y-run-local","text":"1 2 3 4 5 6 7 8 # Build de la imagen docker build -t python-app-1 . # Ejecutar localmente docker run -p 5000 :5000 python-app-1 # Verificar que funciona curl http://localhost:5000/api/v1/healthz","title":"Build y Run Local"},{"location":"#despliegue-en-kubernetes","text":"","title":"\u2638\ufe0f Despliegue en Kubernetes"},{"location":"#manifiestos-base","text":"La aplicaci\u00f3n se despliega usando los siguientes recursos de Kubernetes: Deployment : Gestiona los pods de la aplicaci\u00f3n Service : Expone la aplicaci\u00f3n dentro del cluster Ingress : (Opcional) Routing externo","title":"Manifiestos Base"},{"location":"#despliegue-rapido","text":"1 2 3 4 5 6 7 8 9 10 11 # Aplicar manifiestos kubectl apply -f k8s/ # Verificar estado kubectl get pods,svc -n default # Port forward para testing kubectl port-forward svc/python-app-1 5000 :80 # Test de conectividad curl http://localhost:5000/api/v1/healthz","title":"Despliegue R\u00e1pido"},{"location":"#health-checks-en-kubernetes","text":"La aplicaci\u00f3n est\u00e1 configurada con probes de Kubernetes: 1 2 3 4 5 6 7 8 9 10 11 12 13 livenessProbe : httpGet : path : /api/v1/healthz port : 5000 initialDelaySeconds : 30 periodSeconds : 10 readinessProbe : httpGet : path : /api/v1/healthz port : 5000 initialDelaySeconds : 5 periodSeconds : 5","title":"Health Checks en Kubernetes"},{"location":"#desarrollo-local","text":"","title":"\ud83d\udd27 Desarrollo Local"},{"location":"#requisitos","text":"Python 3.9+ pip Flask","title":"Requisitos"},{"location":"#setup-del-entorno","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # Clonar repositorio git clone https://github.com/Portfolio-jaime/python-app-1.git cd python-app-1 # Crear virtual environment python -m venv venv source venv/bin/activate # Linux/Mac # venv\\Scripts\\activate # Windows # Instalar dependencias pip install -r requirements.txt # Ejecutar aplicaci\u00f3n cd src python app.py La aplicaci\u00f3n estar\u00e1 disponible en http://localhost:5000","title":"Setup del Entorno"},{"location":"#testing","text":"1 2 3 4 5 6 7 8 # Test del endpoint info curl http://localhost:5000/api/v1/info # Test del health check curl http://localhost:5000/api/v1/healthz # Verificar JSON response curl -H \"Accept: application/json\" http://localhost:5000/api/v1/info | jq","title":"Testing"},{"location":"#monitoreo","text":"","title":"\ud83d\udcca Monitoreo"},{"location":"#metricas-disponibles","text":"La aplicaci\u00f3n expone informaci\u00f3n \u00fatil para monitoreo: Hostname : Identificaci\u00f3n del pod/contenedor Timestamp : Para verificar que la aplicaci\u00f3n responde Health Status : Estado de la aplicaci\u00f3n","title":"M\u00e9tricas Disponibles"},{"location":"#integracion-con-prometheus","text":"Para monitoreo avanzado, la aplicaci\u00f3n puede extenderse con m\u00e9tricas de Prometheus: 1 2 3 4 5 6 7 8 from prometheus_client import Counter , Histogram , generate_latest REQUEST_COUNT = Counter ( 'requests_total' , 'Total requests' , [ 'method' , 'endpoint' ]) REQUEST_LATENCY = Histogram ( 'request_duration_seconds' , 'Request latency' ) @app . route ( '/metrics' ) def metrics (): return generate_latest ()","title":"Integraci\u00f3n con Prometheus"},{"location":"#seguridad","text":"","title":"\ud83d\udd10 Seguridad"},{"location":"#mejores-practicas-implementadas","text":"Non-root User : Container ejecuta como usuario no-root Minimal Base Image : Usa imagen slim para reducir superficie de ataque Health Checks : Endpoints para verificar estado de la aplicaci\u00f3n Environment Variables : Configuraci\u00f3n via variables de entorno","title":"Mejores Pr\u00e1cticas Implementadas"},{"location":"#variables-de-entorno","text":"1 2 3 4 5 6 7 8 # Puerto de la aplicaci\u00f3n (default: 5000) FLASK_PORT = 5000 # Modo debug (solo development) FLASK_DEBUG = false # Environment FLASK_ENV = production","title":"Variables de Entorno"},{"location":"#cicd-pipeline","text":"La aplicaci\u00f3n est\u00e1 integrada con GitHub Actions para: Testing : Ejecuci\u00f3n de tests unitarios Security Scanning : An\u00e1lisis de vulnerabilidades Docker Build : Construcci\u00f3n autom\u00e1tica de im\u00e1genes Deployment : Actualizaci\u00f3n autom\u00e1tica de manifiestos","title":"\ud83d\ude80 CI/CD Pipeline"},{"location":"#workflow-ejemplo","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 name : CI/CD Pipeline on : push : branches : [ main ] jobs : test : runs-on : ubuntu-latest steps : - uses : actions/checkout@v4 - name : Run tests run : python -m pytest tests/ build : needs : test runs-on : ubuntu-latest steps : - name : Build Docker image run : docker build -t python-app-1 .","title":"Workflow Ejemplo"},{"location":"#escalabilidad","text":"","title":"\ud83d\udcc8 Escalabilidad"},{"location":"#horizontal-pod-autoscaler","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 apiVersion : autoscaling/v2 kind : HorizontalPodAutoscaler metadata : name : python-app-1-hpa spec : scaleTargetRef : apiVersion : apps/v1 kind : Deployment name : python-app-1 minReplicas : 2 maxReplicas : 10 metrics : - type : Resource resource : name : cpu target : type : Utilization averageUtilization : 70","title":"Horizontal Pod Autoscaler"},{"location":"#troubleshooting","text":"","title":"\ud83d\udc1b Troubleshooting"},{"location":"#problemas-comunes","text":"","title":"Problemas Comunes"},{"location":"#aplicacion-no-responde","text":"1 2 3 4 5 6 7 8 # Verificar logs kubectl logs -l app = python-app-1 # Verificar estado de pods kubectl get pods -l app = python-app-1 # Port forward para debug kubectl port-forward deployment/python-app-1 5000 :5000","title":"Aplicaci\u00f3n no responde"},{"location":"#health-check-falla","text":"1 2 3 4 5 # Test directo al pod kubectl exec -it deployment/python-app-1 -- curl localhost:5000/api/v1/healthz # Verificar configuraci\u00f3n de probes kubectl describe deployment python-app-1","title":"Health check falla"},{"location":"#soporte","text":"Autor: Jaime Henao Email: jaime.andres.henao.arbelaez@ba.com Organizaci\u00f3n: British Airways DevOps Team GitHub: @Portfolio-jaime Aplicaci\u00f3n Python Flask - DevOps Portfolio","title":"\ud83d\udcde Soporte"}]}